{"meta":{"title":"Shawn's Tech Blog","subtitle":"","description":"","author":"Shawn","url":"http://gaoshan070.github.io","root":"/"},"pages":[{"title":"categories","date":"2024-09-12T08:34:23.000Z","updated":"2024-09-12T08:34:49.187Z","comments":true,"path":"categories/index.html","permalink":"http://gaoshan070.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2024-09-12T08:35:17.000Z","updated":"2024-09-12T08:35:37.490Z","comments":true,"path":"tags/index.html","permalink":"http://gaoshan070.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Restful API Design: Best Practices and Guidelines","slug":"restful-api-design","date":"2024-09-12T01:58:39.000Z","updated":"2024-09-12T09:06:14.625Z","comments":true,"path":"2024/09/12/restful-api-design/","permalink":"http://gaoshan070.github.io/2024/09/12/restful-api-design/","excerpt":"","text":"RESTful is currently the most popular API design standard used for designing web data interfaces. Its core principles are easy to grasp, but the details can be tricky to get right. This article summarizes the finer points of RESTful design and explains how to design APIs that are easy to understand and use. 1. URL Design1.1 Verb + ObjectThe core idea of RESTful design is that the client’s data operation commands follow the structure “verb + object.” For example, the command GET &#x2F;articles uses GET as the verb and &#x2F;articles as the object. The verbs usually correspond to the five HTTP methods, which align with CRUD operations: GET: Read POST: Create PUT: Update PATCH: Update (usually partial updates) DELETE: DeleteAccording to the HTTP specification, verbs should always be in uppercase. 1.2 Overriding VerbsSome clients can only use the GET and POST methods. In such cases, the server must accept POST to simulate the other three methods (PUT, PATCH, DELETE). In this situation, the HTTP request from the client should include the X-HTTP-Method-Override header to inform the server which method to use, overriding the default POST method. Example: 12POST /api/Person/4 HTTP/1.1 X-HTTP-Method-Override: PUT In the example above, X-HTTP-Method-Override specifies that the request method should be treated as PUT, instead of POST. 1.3 The Object Must Be a NounThe object, which is the API’s URL, is the target of the HTTP verb. It should always be a noun, not a verb. For instance, &#x2F;articles is a correct URL, while the following URLs are incorrect because they are not nouns: &#x2F;getAllUsers &#x2F;createNewUser &#x2F;deleteAllUsers 1.4 Plural URLsSince URLs are nouns, should they be plural or singular? There is no strict rule, but it’s common to perform operations on collections, such as GET &#x2F;articles (retrieve all articles), where it’s clear that the URL should be plural. For consistency, it’s recommended to always use plural URLs. For example, GET &#x2F;articles&#x2F;2 is better than GET &#x2F;article&#x2F;2. 1.5 Avoid Deeply Nested URLsA common scenario is that resources require multiple levels of categorization, leading to deeply nested URLs, such as fetching a certain type of article by a specific author: 1GET /authors/12/categories/2 This kind of URL is difficult to extend and its meaning isn’t immediately clear. A better approach is to use query strings for all levels beyond the first: 1GET /authors/12?categories=2 Another example is querying for published articles. You might be tempted to design the following URL: 1GET /articles/published But the query string format is clearly better: 1GET /articles?published=true 2. Status Codes2.1 Status Codes Must Be PreciseFor every client request, the server must respond. The response includes both an HTTP status code and data. HTTP status codes are three-digit numbers, divided into five categories: 1xx: Informational 2xx: Success 3xx: Redirection 4xx: Client Error 5xx: Server ErrorThese five categories cover most situations, and each status code has a standard or agreed-upon explanation. Clients can understand what happened simply by checking the status code. Therefore, servers should return the most precise status code possible. APIs do not generally need 1xx status codes, so the following sections will focus on the other four categories. 2.2 2xx Status CodesThe 200 status code indicates success, but different methods can return more specific status codes: GET: 200 OK POST: 201 Created PUT: 200 OK PATCH: 200 OK DELETE: 204 No ContentIn the example above, POST returns a 201 status code, indicating a new resource was created, and DELETE returns 204, meaning the resource no longer exists. Additionally, the 202 Accepted status code means the server has received the request but has not yet processed it, often used for asynchronous operations. Here’s an example: 123456789HTTP/1.1 202 Accepted&#123; &quot;task&quot;: &#123; &quot;href&quot;: &quot;/api/company/job-management/jobs/2130040&quot;, &quot;id&quot;: &quot;2130040&quot; &#125;&#125; 2.3 3xx Status CodesAPIs generally don’t use the 301 (permanent redirection) or 302 (temporary redirection, including 307) status codes because browsers handle them directly, and they’re not necessary at the API level. Instead, APIs may use the 303 See Other status code, which indicates a reference to another URL. It functions similarly to 302 and 307, but 303 is used for POST, PUT, and DELETE requests. Upon receiving a 303 status code, the browser won’t automatically redirect, allowing the user to decide the next step. Here’s an example: 12HTTP/1.1 303 See OtherLocation: /api/orders/12345 2.4 4xx Status Codes4xx status codes represent client errors. Common codes include: 400 Bad Request: The server cannot understand the client’s request and hasn’t processed it.401 Unauthorized: The user has not provided authentication credentials, or they failed authentication.403 Forbidden: The user passed authentication but doesn’t have permission to access the resource.404 Not Found: The requested resource doesn’t exist or isn’t available.405 Method Not Allowed: The authenticated user doesn’t have permission to use the HTTP method.410 Gone: The requested resource has been permanently removed from this URL.415 Unsupported Media Type: The client requested a format that’s not supported. For example, the API only returns JSON, but the client requested XML.422 Unprocessable Entity: The client sent an attachment that the server can’t process, causing the request to fail.429 Too Many Requests: The client has exceeded their rate limit.2.5 5xx Status Codes5xx status codes represent server errors. Generally, APIs don’t need to disclose detailed server information, so two codes are typically sufficient: 500 Internal Server Error: The client’s request was valid, but an unexpected error occurred during processing.503 Service Unavailable: The server is unable to handle the request, usually indicating maintenance. 3. Server Response3.1 Avoid Plain Text ResponsesAPI responses should not be plain text. Instead, they should return structured data in a JSON object. This allows the data to be easily parsed and understood. Therefore, the server’s response header should include Content-Type: application&#x2F;json. Similarly, clients should explicitly inform the server that they accept JSON responses by setting the Accept header to application&#x2F;json. Example: Copy codeGET &#x2F;orders&#x2F;2 HTTP&#x2F;1.1Accept: application&#x2F;json3.2 Don’t Return 200 Status for ErrorsA common mistake is returning a 200 status code even when an error occurs, and placing the error message inside the response body. For example: 123456789HTTP/1.1 200 OKContent-Type: application/json&#123; &quot;status&quot;: &quot;failure&quot;, &quot;data&quot;: &#123; &quot;error&quot;: &quot;Expected at least two items in list.&quot; &#125;&#125; In the example above, only after parsing the response body can the client know that the operation failed. This approach effectively nullifies the usefulness of status codes and should be avoided. The correct approach is to return an appropriate error status code, with details in the response body: 123456789HTTP/1.1 400 Bad RequestContent-Type: application/json&#123; &quot;error&quot;: &quot;Invalid payload.&quot;, &quot;detail&quot;: &#123; &quot;surname&quot;: &quot;This field is required.&quot; &#125;&#125; 3.3 Provide LinksAPI users might not always know how URLs are structured. One solution is to include relevant links in the response to guide the user’s next steps. This approach is called HATEOAS (Hypermedia as the Engine of Application State). For example, GitHub’s API includes links to other URLs: 123456789&#123; ... &quot;feeds_url&quot;: &quot;https://api.github.com/feeds&quot;, &quot;followers_url&quot;: &quot;https://api.github.com/user/followers&quot;, &quot;following_url&quot;: &quot;https://api.github.com/user/following&#123;/target&#125;&quot;, &quot;gists_url&quot;: &quot;https://api.github.com/gists&#123;/gist_id&#125;&quot;, &quot;hub_url&quot;: &quot;https://api.github.com/hub&quot;, ...&#125; In the response above, following one URL will lead to more URLs. Users don’t need to memorize URL designs—they can discover them step by step starting from api.github.com. There is no standardized format for HATEOAS. In the example above, GitHub mixes links with other properties. A better practice would be to separate related links from other attributes: 12345678910HTTP/1.1 200 OKContent-Type: application/json&#123; &quot;status&quot;: &quot;In progress&quot;, &quot;links&quot;: &#123;[ &#123; &quot;rel&quot;:&quot;cancel&quot;, &quot;method&quot;: &quot;delete&quot;, &quot;href&quot;:&quot;/api/status/12345&quot; &#125; , &#123; &quot;rel&quot;:&quot;edit&quot;, &quot;method&quot;: &quot;put&quot;, &quot;href&quot;:&quot;/api/status/12345&quot; &#125; ]&#125;&#125;","categories":[{"name":"Restful API","slug":"Restful-API","permalink":"http://gaoshan070.github.io/categories/Restful-API/"}],"tags":[{"name":"API","slug":"API","permalink":"http://gaoshan070.github.io/tags/API/"}]},{"title":"Hexo Introduction","slug":"hexo-tutorial","date":"2024-09-12T01:21:01.547Z","updated":"2024-09-12T08:54:46.781Z","comments":true,"path":"2024/09/12/hexo-tutorial/","permalink":"http://gaoshan070.github.io/2024/09/12/hexo-tutorial/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Web Development","slug":"Web-Development","permalink":"http://gaoshan070.github.io/categories/Web-Development/"}],"tags":[]}],"categories":[{"name":"Restful API","slug":"Restful-API","permalink":"http://gaoshan070.github.io/categories/Restful-API/"},{"name":"Web Development","slug":"Web-Development","permalink":"http://gaoshan070.github.io/categories/Web-Development/"}],"tags":[{"name":"API","slug":"API","permalink":"http://gaoshan070.github.io/tags/API/"}]}