{"meta":{"title":"Shawn's Tech Blog","subtitle":"","description":"","author":"Shawn","url":"http://gaoshan070.github.io","root":"/"},"pages":[{"title":"tags","date":"2024-09-12T08:35:17.000Z","updated":"2024-09-12T08:35:37.490Z","comments":true,"path":"tags/index.html","permalink":"http://gaoshan070.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2024-09-12T08:34:23.000Z","updated":"2024-09-12T08:34:49.187Z","comments":true,"path":"categories/index.html","permalink":"http://gaoshan070.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Class and Instance","slug":"Class-and-Instance","date":"2024-09-15T09:11:17.454Z","updated":"2024-09-15T09:30:26.512Z","comments":true,"path":"2024/09/15/Class-and-Instance/","permalink":"http://gaoshan070.github.io/2024/09/15/Class-and-Instance/","excerpt":"In the real world, we define the abstract concept of a person, while specific people are concrete instances like “Bob,” “Tom,” and “Lily.” Therefore, “person” can be defined as a class, and specific people are instances. Real World Computer Model Java Code Person Class class Person { } Bob Instance &#x2F; bob Person bob &#x3D; new Person() Tom Instance &#x2F; tom Person tom &#x3D; new Person() Lily Instance &#x2F; lily Person lily &#x3D; new Person()","text":"In the real world, we define the abstract concept of a person, while specific people are concrete instances like “Bob,” “Tom,” and “Lily.” Therefore, “person” can be defined as a class, and specific people are instances. Real World Computer Model Java Code Person Class class Person { } Bob Instance &#x2F; bob Person bob &#x3D; new Person() Tom Instance &#x2F; tom Person tom &#x3D; new Person() Lily Instance &#x2F; lily Person lily &#x3D; new Person() Similarly, “book” is also an abstract concept, so it is a class, while specific books like Core Java, Thinking in Java, and Java Notes are instances: Real World Computer Model Java Code Book Class class Book { } Core Java Instance &#x2F; book1 Book book1 &#x3D; new Book() Thinking in Java Instance &#x2F; book2 Book book2 &#x3D; new Book() Java Notes Instance &#x2F; book3 Book book3 &#x3D; new Book() So, once you understand the concepts of class and instance, you’ve essentially grasped the core of object-oriented programming. A class is a blueprint for creating instances. Therefore, a class itself is a data type, while an instance is an object created from a class. You can create multiple instances, each having the same type but possibly with different properties. Defining a ClassIn Java, creating a class, such as naming it Person, is defining a class: 1234class Person &#123; public String name; public int age;&#125; A class can contain multiple fields, which describe the characteristics of the class. In the Person class above, two fields are defined: one is a String type field named name, and the other is an int type field named age. The class collects data into an object, achieving data encapsulation. public is used to modify fields, meaning these fields can be accessed externally. Here’s another example of defining the Book class: 123456class Book &#123; public String name; public String author; public String isbn; public double price;&#125; Please identify the fields in the Book class. Creating InstancesDefining a class only creates the blueprint for objects, but to create actual object instances based on the blueprint, you must use the new operator. The new operator creates an instance, and then you need to define a reference type variable to point to that instance: 1Person bob = new Person(); The code above creates an instance of the Person type and points to it using the variable bob. It’s important to distinguish between Person Bob, which defines the bob variable of type Person, and new Person(), which creates a Person instance. Once you have a variable pointing to the instance, you can operate on the instance through the variable. You can access instance variables using variable.field, for example: 123bob.name = &quot;Bob&quot;; // Assign a value to the name fieldbob.age = 12; // Assign a value to the age fieldSystem.out.println(bob.name); // Access the name field You can create another instance as below: 123Person tom = new Person();tom.name = &quot;Tom&quot;;tom.age = 15; The two variables each point to different instances.Both instances have the name and age fields defined by the class, and each holds its own independent data without interfering with the other. Note A single Java source file can contain multiple class definitions, but it can only have one public class, and the public class name must match the file name. If you need to define multiple public classes, they must be split into separate Java source files. ExerciseDefine a City class with the following fields: name: the name of the city, of type Stringlatitude: the latitude, of type doublelongitude: the longitude, of type doubleInstantiate a few City objects, assign values to them, and print them out. Example: 123456789public class Main &#123; public static void main(String[] args) &#123; ??? &#125;&#125;class City &#123; // Fields go here&#125; SummaryIn OOP, a class is the “template” and an instance is the “object” created from that template. Defining a class is defining a data type, and instances are objects of that data type. Each instance of a class has its own set of fields, independent of other instances. You create new instances with the new operator, and use variables to reference them. You access instance fields using the syntax variable.field.","categories":[{"name":"JAVA for beginners","slug":"JAVA-for-beginners","permalink":"http://gaoshan070.github.io/categories/JAVA-for-beginners/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://gaoshan070.github.io/tags/JAVA/"}]},{"title":"Object Oriented Programming","slug":"object-oriented-programming","date":"2024-09-15T08:53:29.411Z","updated":"2024-09-15T09:04:37.953Z","comments":true,"path":"2024/09/15/object-oriented-programming/","permalink":"http://gaoshan070.github.io/2024/09/15/object-oriented-programming/","excerpt":"Java is an object-oriented programming language. Object-Oriented Programming, abbreviated as OOP, is a programming paradigm based on the concept of objects Unlike OOP, there is procedural programming. Procedural programming breaks a model down into step-by-step procedures. For example, if your boss tells you to write a TODO task, it must follow these steps: Read the file; Write the TODO; Save the file. Object-oriented programming, as the name suggests, is about working with objects. Once you have an object, you can interact with it. For example: 123GirlFriend gf = new GirlFriend();gf.name = &quot;Alice&quot;;gf.send(&quot;flowers&quot;);","text":"Java is an object-oriented programming language. Object-Oriented Programming, abbreviated as OOP, is a programming paradigm based on the concept of objects Unlike OOP, there is procedural programming. Procedural programming breaks a model down into step-by-step procedures. For example, if your boss tells you to write a TODO task, it must follow these steps: Read the file; Write the TODO; Save the file. Object-oriented programming, as the name suggests, is about working with objects. Once you have an object, you can interact with it. For example: 123GirlFriend gf = new GirlFriend();gf.name = &quot;Alice&quot;;gf.send(&quot;flowers&quot;); Therefore, object-oriented programming is a way to map the real world into a computer model by using objects.The basic concepts of object-oriented programming include: Class Instance Method The implementation of object-oriented programming includes: Inheritance Polymorphism Java itself provides mechanisms such as: package classpath jar Additionally, the core classes provided by the Java Standard Library include: String Wrapper types JavaBean Enum Commonly used utility classes.","categories":[{"name":"JAVA for beginners","slug":"JAVA-for-beginners","permalink":"http://gaoshan070.github.io/categories/JAVA-for-beginners/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://gaoshan070.github.io/tags/JAVA/"}]},{"title":"Restful API Design: Best Practices and Guidelines","slug":"restful-api-design","date":"2024-09-12T01:59:30.255Z","updated":"2024-09-15T08:54:44.321Z","comments":true,"path":"2024/09/12/restful-api-design/","permalink":"http://gaoshan070.github.io/2024/09/12/restful-api-design/","excerpt":"RESTful is currently the most popular API design standard used for designing web data interfaces. Its core principles are easy to grasp, but the details can be tricky to get right. This article summarizes the finer points of RESTful design and explains how to design APIs that are easy to understand and use.","text":"RESTful is currently the most popular API design standard used for designing web data interfaces. Its core principles are easy to grasp, but the details can be tricky to get right. This article summarizes the finer points of RESTful design and explains how to design APIs that are easy to understand and use. 1. URL Design 1.1 Verb + ObjectThe core idea of RESTful design is that the client’s data operation commands follow the structure “verb + object.” For example, the command GET &#x2F;articles uses GET as the verb and &#x2F;articles as the object. The verbs usually correspond to the five HTTP methods, which align with CRUD operations: GET: Read POST: Create PUT: Update PATCH: Update (usually partial updates) DELETE: DeleteAccording to the HTTP specification, verbs should always be in uppercase. 1.2 Overriding VerbsSome clients can only use the GET and POST methods. In such cases, the server must accept POST to simulate the other three methods (PUT, PATCH, DELETE). In this situation, the HTTP request from the client should include the X-HTTP-Method-Override header to inform the server which method to use, overriding the default POST method. Example: 12POST /api/Person/4 HTTP/1.1 X-HTTP-Method-Override: PUT In the example above, X-HTTP-Method-Override specifies that the request method should be treated as PUT, instead of POST. 1.3 The Object Must Be a NounThe object, which is the API’s URL, is the target of the HTTP verb. It should always be a noun, not a verb. For instance, &#x2F;articles is a correct URL, while the following URLs are incorrect because they are not nouns: &#x2F;getAllUsers &#x2F;createNewUser &#x2F;deleteAllUsers 1.4 Plural URLsSince URLs are nouns, should they be plural or singular? There is no strict rule, but it’s common to perform operations on collections, such as GET &#x2F;articles (retrieve all articles), where it’s clear that the URL should be plural. For consistency, it’s recommended to always use plural URLs. For example, GET &#x2F;articles&#x2F;2 is better than GET &#x2F;article&#x2F;2. 1.5 Avoid Deeply Nested URLsA common scenario is that resources require multiple levels of categorization, leading to deeply nested URLs, such as fetching a certain type of article by a specific author: 1GET /authors/12/categories/2 This kind of URL is difficult to extend and its meaning isn’t immediately clear. A better approach is to use query strings for all levels beyond the first: 1GET /authors/12?categories=2 Another example is querying for published articles. You might be tempted to design the following URL: 1GET /articles/published But the query string format is clearly better: 1GET /articles?published=true 2. Status Codes 2.1 Status Codes Must Be PreciseFor every client request, the server must respond. The response includes both an HTTP status code and data. HTTP status codes are three-digit numbers, divided into five categories: 1xx: Informational 2xx: Success 3xx: Redirection 4xx: Client Error 5xx: Server ErrorThese five categories cover most situations, and each status code has a standard or agreed-upon explanation. Clients can understand what happened simply by checking the status code. Therefore, servers should return the most precise status code possible. APIs do not generally need 1xx status codes, so the following sections will focus on the other four categories. 2.2 2xx Status CodesThe 200 status code indicates success, but different methods can return more specific status codes: GET: 200 OK POST: 201 Created PUT: 200 OK PATCH: 200 OK DELETE: 204 No Content In the example above, POST returns a 201 status code, indicating a new resource was created, and DELETE returns 204, meaning the resource no longer exists. Additionally, the 202 Accepted status code means the server has received the request but has not yet processed it, often used for asynchronous operations. Here’s an example: 123456789HTTP/1.1 202 Accepted&#123; &quot;task&quot;: &#123; &quot;href&quot;: &quot;/api/company/job-management/jobs/2130040&quot;, &quot;id&quot;: &quot;2130040&quot; &#125;&#125; 2.3 3xx Status CodesAPIs generally don’t use the 301 (permanent redirection) or 302 (temporary redirection, including 307) status codes because browsers handle them directly, and they’re not necessary at the API level. Instead, APIs may use the 303 See Other status code, which indicates a reference to another URL. It functions similarly to 302 and 307, but 303 is used for POST, PUT, and DELETE requests. Upon receiving a 303 status code, the browser won’t automatically redirect, allowing the user to decide the next step. Here’s an example: 12HTTP/1.1 303 See OtherLocation: /api/orders/12345 2.4 4xx Status Codes4xx status codes represent client errors. Common codes include:400 Bad Request: The server cannot understand the client’s request and hasn’t processed it.401 Unauthorized: The user has not provided authentication credentials, or they failed authentication.403 Forbidden: The user passed authentication but doesn’t have permission to access the resource.404 Not Found: The requested resource doesn’t exist or isn’t available.405 Method Not Allowed: The authenticated user doesn’t have permission to use the HTTP method.410 Gone: The requested resource has been permanently removed from this URL.415 Unsupported Media Type: The client requested a format that’s not supported. For example, the API only returns JSON, but the client requested XML.422 Unprocessable Entity: The client sent an attachment that the server can’t process, causing the request to fail.429 Too Many Requests: The client has exceeded their rate limit. 2.5 5xx Status Codes5xx status codes represent server errors. Generally, APIs don’t need to disclose detailed server information, so two codes are typically sufficient:500 Internal Server Error: The client’s request was valid, but an unexpected error occurred during processing.503 Service Unavailable: The server is unable to handle the request, usually indicating maintenance. 3. Server Response 3.1 Avoid Plain Text ResponsesAPI responses should not be plain text. Instead, they should return structured data in a JSON object. This allows the data to be easily parsed and understood. Therefore, the server’s response header should include Content-Type: application&#x2F;json. Similarly, clients should explicitly inform the server that they accept JSON responses by setting the Accept header to application&#x2F;json. Example: 12GET /orders/2 HTTP/1.1 Accept: application/json 3.2 Don’t Return 200 Status for ErrorsA common mistake is returning a 200 status code even when an error occurs, and placing the error message inside the response body. For example: 123456789HTTP/1.1 200 OKContent-Type: application/json&#123; &quot;status&quot;: &quot;failure&quot;, &quot;data&quot;: &#123; &quot;error&quot;: &quot;Expected at least two items in list.&quot; &#125;&#125; In the example above, only after parsing the response body can the client know that the operation failed. This approach effectively nullifies the usefulness of status codes and should be avoided. The correct approach is to return an appropriate error status code, with details in the response body: 123456789HTTP/1.1 400 Bad RequestContent-Type: application/json&#123; &quot;error&quot;: &quot;Invalid payload.&quot;, &quot;detail&quot;: &#123; &quot;surname&quot;: &quot;This field is required.&quot; &#125;&#125; 3.3 Provide LinksAPI users might not always know how URLs are structured. One solution is to include relevant links in the response to guide the user’s next steps. This approach is called HATEOAS (Hypermedia as the Engine of Application State). For example, GitHub’s API includes links to other URLs: 123456789&#123; ... &quot;feeds_url&quot;: &quot;https://api.github.com/feeds&quot;, &quot;followers_url&quot;: &quot;https://api.github.com/user/followers&quot;, &quot;following_url&quot;: &quot;https://api.github.com/user/following&#123;/target&#125;&quot;, &quot;gists_url&quot;: &quot;https://api.github.com/gists&#123;/gist_id&#125;&quot;, &quot;hub_url&quot;: &quot;https://api.github.com/hub&quot;, ...&#125; In the response above, following one URL will lead to more URLs. Users don’t need to memorize URL designs—they can discover them step by step starting from api.github.com. There is no standardized format for HATEOAS. In the example above, GitHub mixes links with other properties. A better practice would be to separate related links from other attributes: 12345678910HTTP/1.1 200 OKContent-Type: application/json&#123; &quot;status&quot;: &quot;In progress&quot;, &quot;links&quot;: &#123;[ &#123; &quot;rel&quot;:&quot;cancel&quot;, &quot;method&quot;: &quot;delete&quot;, &quot;href&quot;:&quot;/api/status/12345&quot; &#125; , &#123; &quot;rel&quot;:&quot;edit&quot;, &quot;method&quot;: &quot;put&quot;, &quot;href&quot;:&quot;/api/status/12345&quot; &#125; ]&#125;&#125;","categories":[{"name":"Restful API","slug":"Restful-API","permalink":"http://gaoshan070.github.io/categories/Restful-API/"}],"tags":[{"name":"API","slug":"API","permalink":"http://gaoshan070.github.io/tags/API/"}]},{"title":"Hexo Introduction","slug":"hexo-tutorial","date":"2024-09-12T01:21:01.547Z","updated":"2024-09-13T01:27:09.684Z","comments":true,"path":"2024/09/12/hexo-tutorial/","permalink":"http://gaoshan070.github.io/2024/09/12/hexo-tutorial/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Web Development","slug":"Web-Development","permalink":"http://gaoshan070.github.io/categories/Web-Development/"}],"tags":[]}],"categories":[{"name":"JAVA for beginners","slug":"JAVA-for-beginners","permalink":"http://gaoshan070.github.io/categories/JAVA-for-beginners/"},{"name":"Restful API","slug":"Restful-API","permalink":"http://gaoshan070.github.io/categories/Restful-API/"},{"name":"Web Development","slug":"Web-Development","permalink":"http://gaoshan070.github.io/categories/Web-Development/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://gaoshan070.github.io/tags/JAVA/"},{"name":"API","slug":"API","permalink":"http://gaoshan070.github.io/tags/API/"}]}